// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using QuerySplitting.Models;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;

namespace QuerySplitting.Data
{
    public partial class Context
    {
        private IContextProcedures _procedures;

        public virtual IContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new ContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public IContextProcedures GetProcedures()
        {
            return Procedures;
        }
    }

    public partial class ContextProcedures : IContextProcedures
    {
        private readonly Context _context;

        public ContextProcedures(Context context)
        {
            _context = context;
        }

        public virtual async Task<int> usp_AddCustomerAsync(string CompanyName, int? ContactId, string Street, string City, string Region, string PostalCode, int? CountryIdentifier, string Phone, int? ContactTypeIdentifier, OutputParameter<int?> Identifier, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterIdentifier = new SqlParameter
            {
                ParameterName = "Identifier",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = Identifier?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterIdentifier,
                new SqlParameter
                {
                    ParameterName = "CompanyName",
                    Size = 80,
                    Value = CompanyName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ContactId",
                    Value = ContactId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Street",
                    Size = 120,
                    Value = Street ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "City",
                    Size = 30,
                    Value = City ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Region",
                    Size = 30,
                    Value = Region ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PostalCode",
                    Size = 20,
                    Value = PostalCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CountryIdentifier",
                    Value = CountryIdentifier ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Phone",
                    Size = 48,
                    Value = Phone ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ContactTypeIdentifier",
                    Value = ContactTypeIdentifier ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[usp_AddCustomer] @Identifier = @Identifier OUTPUT, @CompanyName = @CompanyName, @ContactId = @ContactId, @Street = @Street, @City = @City, @Region = @Region, @PostalCode = @PostalCode, @CountryIdentifier = @CountryIdentifier, @Phone = @Phone, @ContactTypeIdentifier = @ContactTypeIdentifier", sqlParameters, cancellationToken);

            Identifier.SetValue(parameterIdentifier.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<usp_AddCustomer1Result>> usp_AddCustomer1Async(string CompanyName, int? ContactId, string Street, string City, string Region, string PostalCode, int? CountryIdentifier, string Phone, int? ContactTypeIdentifier, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CompanyName",
                    Size = 80,
                    Value = CompanyName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ContactId",
                    Value = ContactId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Street",
                    Size = 120,
                    Value = Street ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "City",
                    Size = 30,
                    Value = City ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Region",
                    Size = 30,
                    Value = Region ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PostalCode",
                    Size = 20,
                    Value = PostalCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CountryIdentifier",
                    Value = CountryIdentifier ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Phone",
                    Size = 48,
                    Value = Phone ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ContactTypeIdentifier",
                    Value = ContactTypeIdentifier ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<usp_AddCustomer1Result>("EXEC @returnValue = [dbo].[usp_AddCustomer1] @CompanyName = @CompanyName, @ContactId = @ContactId, @Street = @Street, @City = @City, @Region = @Region, @PostalCode = @PostalCode, @CountryIdentifier = @CountryIdentifier, @Phone = @Phone, @ContactTypeIdentifier = @ContactTypeIdentifier", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<usp_CustomersByCountryResult>> usp_CustomersByCountryAsync(int? CountryIdentifier, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CountryIdentifier",
                    Value = CountryIdentifier ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<usp_CustomersByCountryResult>("EXEC @returnValue = [dbo].[usp_CustomersByCountry] @CountryIdentifier = @CountryIdentifier", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<usp_CustomersOrderByResult>> usp_CustomersOrderByAsync(string orderby, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "orderby",
                    Size = 255,
                    Value = orderby ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<usp_CustomersOrderByResult>("EXEC @returnValue = [dbo].[usp_CustomersOrderBy] @orderby = @orderby", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> usp_MaxLengthOfColumnsForTableAsync(string TableName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "TableName",
                    Size = 256,
                    Value = TableName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[usp_MaxLengthOfColumnsForTable] @TableName = @TableName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<usp_SelectCatCountryContactTypeResult>> usp_SelectCatCountryContactTypeAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<usp_SelectCatCountryContactTypeResult>("EXEC @returnValue = [dbo].[usp_SelectCatCountryContactType]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<uspSupplierForProductResult>> uspSupplierForProductAsync(int? ProductIdentifier, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProductIdentifier",
                    Value = ProductIdentifier ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<uspSupplierForProductResult>("EXEC @returnValue = [dbo].[uspSupplierForProduct] @ProductIdentifier = @ProductIdentifier", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
