// <auto-generated/>
#nullable enable
#pragma warning disable CS0162 // Unreachable code
#pragma warning disable CS0164 // Unreferenced label
#pragma warning disable CS0219 // Variable assigned but never used

namespace Week4_cs
{
    partial class RegularExpressionHelpers
    {
        /// <remarks>
        /// Pattern:<br/>
        /// <code>(?&lt;day&gt;\\d{1,2})((st)|(nd)|(rd)|(th))? (?&lt;month&gt;[A-Za-z]+) (?&lt;year&gt;\\d{4})</code><br/>
        /// Explanation:<br/>
        /// <code>
        /// ○ "day" capture group.<br/>
        ///     ○ Match a Unicode digit greedily at least 1 and at most 2 times.<br/>
        /// ○ Optional (greedy).<br/>
        ///     ○ 1st capture group.<br/>
        ///         ○ Match with 4 alternative expressions.<br/>
        ///             ○ 2nd capture group.<br/>
        ///                 ○ Match the string "st".<br/>
        ///             ○ 3rd capture group.<br/>
        ///                 ○ Match the string "nd".<br/>
        ///             ○ 4th capture group.<br/>
        ///                 ○ Match the string "rd".<br/>
        ///             ○ 5th capture group.<br/>
        ///                 ○ Match the string "th".<br/>
        /// ○ Match ' '.<br/>
        /// ○ "month" capture group.<br/>
        ///     ○ Match a character in the set [A-Za-z] atomically at least once.<br/>
        /// ○ Match ' '.<br/>
        /// ○ "year" capture group.<br/>
        ///     ○ Match a Unicode digit exactly 4 times.<br/>
        /// </code>
        /// </remarks>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Text.RegularExpressions.Generator", "8.0.10.36612")]
        private static partial global::System.Text.RegularExpressions.Regex DatesRegex() => global::System.Text.RegularExpressions.Generated.DatesRegex_0.Instance;
    }
}

namespace System.Text.RegularExpressions.Generated
{
    using System;
    using System.Buffers;
    using System.CodeDom.Compiler;
    using System.Collections;
    using System.ComponentModel;
    using System.Globalization;
    using System.Runtime.CompilerServices;
    using System.Text.RegularExpressions;
    using System.Threading;

    /// <summary>Custom <see cref="Regex"/>-derived type for the DatesRegex method.</summary>
    [GeneratedCodeAttribute("System.Text.RegularExpressions.Generator", "8.0.10.36612")]
    file sealed class DatesRegex_0 : Regex
    {
        /// <summary>Cached, thread-safe singleton instance.</summary>
        internal static readonly DatesRegex_0 Instance = new();
    
        /// <summary>Initializes the instance.</summary>
        private DatesRegex_0()
        {
            base.pattern = "(?<day>\\d{1,2})((st)|(nd)|(rd)|(th))? (?<month>[A-Za-z]+) (?<year>\\d{4})";
            base.roptions = RegexOptions.None;
            ValidateMatchTimeout(Utilities.s_defaultTimeout);
            base.internalMatchTimeout = Utilities.s_defaultTimeout;
            base.factory = new RunnerFactory();
            base.CapNames = new Hashtable { { "0", 0 } ,  { "1", 1 } ,  { "2", 2 } ,  { "3", 3 } ,  { "4", 4 } ,  { "5", 5 } ,  { "day", 6 } ,  { "month", 7 } ,  { "year", 8 }  };
            base.capslist = new string[] {"0", "1", "2", "3", "4", "5", "day", "month", "year" };
            base.capsize = 9;
        }
    
        /// <summary>Provides a factory for creating <see cref="RegexRunner"/> instances to be used by methods on <see cref="Regex"/>.</summary>
        private sealed class RunnerFactory : RegexRunnerFactory
        {
            /// <summary>Creates an instance of a <see cref="RegexRunner"/> used by methods on <see cref="Regex"/>.</summary>
            protected override RegexRunner CreateInstance() => new Runner();
        
            /// <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
            private sealed class Runner : RegexRunner
            {
                /// <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
                /// <param name="inputSpan">The text being scanned by the regular expression.</param>
                protected override void Scan(ReadOnlySpan<char> inputSpan)
                {
                    // Search until we can't find a valid starting position, we find a match, or we reach the end of the input.
                    while (TryFindNextPossibleStartingPosition(inputSpan) &&
                           !TryMatchAtCurrentPosition(inputSpan) &&
                           base.runtextpos != inputSpan.Length)
                    {
                        base.runtextpos++;
                        if (Utilities.s_hasTimeout)
                        {
                            base.CheckTimeout();
                        }
                    }
                }
        
                /// <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
                /// <param name="inputSpan">The text being scanned by the regular expression.</param>
                /// <returns>true if a possible match was found; false if no more matches are possible.</returns>
                private bool TryFindNextPossibleStartingPosition(ReadOnlySpan<char> inputSpan)
                {
                    int pos = base.runtextpos;
                    
                    // Any possible match is at least 8 characters.
                    if (pos <= inputSpan.Length - 8)
                    {
                        // The pattern begins with a Unicode digit.
                        // Find the next occurrence. If it can't be found, there's no match.
                        int i = inputSpan.Slice(pos).IndexOfAnyDigit();
                        if (i >= 0)
                        {
                            base.runtextpos = pos + i;
                            return true;
                        }
                    }
                    
                    // No match found.
                    base.runtextpos = inputSpan.Length;
                    return false;
                }
        
                /// <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
                /// <param name="inputSpan">The text being scanned by the regular expression.</param>
                /// <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
                private bool TryMatchAtCurrentPosition(ReadOnlySpan<char> inputSpan)
                {
                    int pos = base.runtextpos;
                    int matchStart = pos;
                    int capture_starting_pos = 0;
                    int capture_starting_pos6 = 0;
                    int capture_starting_pos7 = 0;
                    int charloop_capture_pos = 0;
                    int charloop_starting_pos = 0, charloop_ending_pos = 0;
                    int loop_iteration = 0;
                    int stackpos = 0;
                    ReadOnlySpan<char> slice = inputSpan.Slice(pos);
                    
                    // "day" capture group.
                    //{
                        capture_starting_pos = pos;
                        
                        // Match a Unicode digit greedily at least 1 and at most 2 times.
                        //{
                            charloop_starting_pos = pos;
                            
                            int iteration = 0;
                            while (iteration < 2 && (uint)iteration < (uint)slice.Length && char.IsDigit(slice[iteration]))
                            {
                                iteration++;
                            }
                            
                            if (iteration == 0)
                            {
                                UncaptureUntil(0);
                                return false; // The input didn't match.
                            }
                            
                            slice = slice.Slice(iteration);
                            pos += iteration;
                            
                            charloop_ending_pos = pos;
                            charloop_starting_pos++;
                            goto CharLoopEnd;
                            
                            CharLoopBacktrack:
                            UncaptureUntil(charloop_capture_pos);
                            
                            if (Utilities.s_hasTimeout)
                            {
                                base.CheckTimeout();
                            }
                            
                            if (charloop_starting_pos >= charloop_ending_pos)
                            {
                                UncaptureUntil(0);
                                return false; // The input didn't match.
                            }
                            pos = --charloop_ending_pos;
                            slice = inputSpan.Slice(pos);
                            
                            CharLoopEnd:
                            charloop_capture_pos = base.Crawlpos();
                        //}
                        
                        base.Capture(6, capture_starting_pos, pos);
                        
                        goto CaptureSkipBacktrack;
                        
                        CaptureBacktrack:
                        goto CharLoopBacktrack;
                        
                        CaptureSkipBacktrack:;
                    //}
                    
                    // Optional (greedy).
                    //{
                        loop_iteration = 0;
                        
                        LoopBody:
                        Utilities.StackPush(ref base.runstack!, ref stackpos, base.Crawlpos(), pos);
                        
                        loop_iteration++;
                        
                        // 1st capture group.
                        //{
                            int capture_starting_pos1 = pos;
                            
                            // Match with 4 alternative expressions.
                            //{
                                int alternation_starting_pos = pos;
                                int alternation_starting_capturepos = base.Crawlpos();
                                
                                // Branch 0
                                //{
                                    // 2nd capture group.
                                    {
                                        int capture_starting_pos2 = pos;
                                        
                                        // Match the string "st".
                                        if (!slice.StartsWith("st"))
                                        {
                                            goto AlternationBranch;
                                        }
                                        
                                        pos += 2;
                                        slice = inputSpan.Slice(pos);
                                        base.Capture(2, capture_starting_pos2, pos);
                                    }
                                    
                                    Utilities.StackPush(ref base.runstack!, ref stackpos, 0, alternation_starting_pos, alternation_starting_capturepos);
                                    goto AlternationMatch;
                                    
                                    AlternationBranch:
                                    pos = alternation_starting_pos;
                                    slice = inputSpan.Slice(pos);
                                    UncaptureUntil(alternation_starting_capturepos);
                                //}
                                
                                // Branch 1
                                //{
                                    // 3rd capture group.
                                    {
                                        int capture_starting_pos3 = pos;
                                        
                                        // Match the string "nd".
                                        if (!slice.StartsWith("nd"))
                                        {
                                            goto AlternationBranch1;
                                        }
                                        
                                        pos += 2;
                                        slice = inputSpan.Slice(pos);
                                        base.Capture(3, capture_starting_pos3, pos);
                                    }
                                    
                                    Utilities.StackPush(ref base.runstack!, ref stackpos, 1, alternation_starting_pos, alternation_starting_capturepos);
                                    goto AlternationMatch;
                                    
                                    AlternationBranch1:
                                    pos = alternation_starting_pos;
                                    slice = inputSpan.Slice(pos);
                                    UncaptureUntil(alternation_starting_capturepos);
                                //}
                                
                                // Branch 2
                                //{
                                    // 4th capture group.
                                    {
                                        int capture_starting_pos4 = pos;
                                        
                                        // Match the string "rd".
                                        if (!slice.StartsWith("rd"))
                                        {
                                            goto AlternationBranch2;
                                        }
                                        
                                        pos += 2;
                                        slice = inputSpan.Slice(pos);
                                        base.Capture(4, capture_starting_pos4, pos);
                                    }
                                    
                                    Utilities.StackPush(ref base.runstack!, ref stackpos, 2, alternation_starting_pos, alternation_starting_capturepos);
                                    goto AlternationMatch;
                                    
                                    AlternationBranch2:
                                    pos = alternation_starting_pos;
                                    slice = inputSpan.Slice(pos);
                                    UncaptureUntil(alternation_starting_capturepos);
                                //}
                                
                                // Branch 3
                                //{
                                    // 5th capture group.
                                    {
                                        int capture_starting_pos5 = pos;
                                        
                                        // Match the string "th".
                                        if (!slice.StartsWith("th"))
                                        {
                                            goto LoopIterationNoMatch;
                                        }
                                        
                                        pos += 2;
                                        slice = inputSpan.Slice(pos);
                                        base.Capture(5, capture_starting_pos5, pos);
                                    }
                                    
                                    Utilities.StackPush(ref base.runstack!, ref stackpos, 3, alternation_starting_pos, alternation_starting_capturepos);
                                    goto AlternationMatch;
                                //}
                                
                                AlternationBacktrack:
                                if (Utilities.s_hasTimeout)
                                {
                                    base.CheckTimeout();
                                }
                                
                                Utilities.StackPop(base.runstack!, ref stackpos, out alternation_starting_capturepos, out alternation_starting_pos);
                                switch (base.runstack![--stackpos])
                                {
                                    case 0:
                                        goto AlternationBranch;
                                    case 1:
                                        goto AlternationBranch1;
                                    case 2:
                                        goto AlternationBranch2;
                                    case 3:
                                        goto LoopIterationNoMatch;
                                }
                                
                                AlternationMatch:;
                            //}
                            
                            base.Capture(1, capture_starting_pos1, pos);
                            
                            Utilities.StackPush(ref base.runstack!, ref stackpos, capture_starting_pos1);
                            goto CaptureSkipBacktrack1;
                            
                            CaptureBacktrack1:
                            capture_starting_pos1 = base.runstack![--stackpos];
                            goto AlternationBacktrack;
                            
                            CaptureSkipBacktrack1:;
                        //}
                        
                        
                        // The loop has an upper bound of 1. Continue iterating greedily if it hasn't yet been reached.
                        if (loop_iteration == 0)
                        {
                            goto LoopBody;
                        }
                        goto LoopEnd;
                        
                        // The loop iteration failed. Put state back to the way it was before the iteration.
                        LoopIterationNoMatch:
                        if (--loop_iteration < 0)
                        {
                            // Unable to match the remainder of the expression after exhausting the loop.
                            goto CaptureBacktrack;
                        }
                        pos = base.runstack![--stackpos];
                        UncaptureUntil(base.runstack![--stackpos]);
                        slice = inputSpan.Slice(pos);
                        goto LoopEnd;
                        
                        LoopBacktrack:
                        if (Utilities.s_hasTimeout)
                        {
                            base.CheckTimeout();
                        }
                        
                        if (loop_iteration == 0)
                        {
                            // No iterations of the loop remain to backtrack into. Fail the loop.
                            goto CaptureBacktrack;
                        }
                        goto CaptureBacktrack1;
                        LoopEnd:;
                    //}
                    
                    // Match ' '.
                    if (slice.IsEmpty || slice[0] != ' ')
                    {
                        goto LoopBacktrack;
                    }
                    
                    // "month" capture group.
                    {
                        pos++;
                        slice = inputSpan.Slice(pos);
                        capture_starting_pos6 = pos;
                        
                        // Match a character in the set [A-Za-z] atomically at least once.
                        {
                            int iteration1 = slice.IndexOfAnyExcept(Utilities.s_asciiLetters);
                            if (iteration1 < 0)
                            {
                                iteration1 = slice.Length;
                            }
                            
                            if (iteration1 == 0)
                            {
                                goto LoopBacktrack;
                            }
                            
                            slice = slice.Slice(iteration1);
                            pos += iteration1;
                        }
                        
                        base.Capture(7, capture_starting_pos6, pos);
                    }
                    
                    // Match ' '.
                    if (slice.IsEmpty || slice[0] != ' ')
                    {
                        goto LoopBacktrack;
                    }
                    
                    // "year" capture group.
                    {
                        pos++;
                        slice = inputSpan.Slice(pos);
                        capture_starting_pos7 = pos;
                        
                        // Match a Unicode digit exactly 4 times.
                        {
                            if ((uint)slice.Length < 4 ||
                                !char.IsDigit(slice[0]) ||
                                !char.IsDigit(slice[1]) ||
                                !char.IsDigit(slice[2]) ||
                                !char.IsDigit(slice[3]))
                            {
                                goto LoopBacktrack;
                            }
                        }
                        
                        pos += 4;
                        slice = inputSpan.Slice(pos);
                        base.Capture(8, capture_starting_pos7, pos);
                    }
                    
                    // The input matched.
                    base.runtextpos = pos;
                    base.Capture(0, matchStart, pos);
                    return true;
                    
                    // <summary>Undo captures until it reaches the specified capture position.</summary>
                    [MethodImpl(MethodImplOptions.AggressiveInlining)]
                    void UncaptureUntil(int capturePosition)
                    {
                        while (base.Crawlpos() > capturePosition)
                        {
                            base.Uncapture();
                        }
                    }
                }
            }
        }

    }
    
    /// <summary>Helper methods used by generated <see cref="Regex"/>-derived implementations.</summary>
    [GeneratedCodeAttribute("System.Text.RegularExpressions.Generator", "8.0.10.36612")]
    file static class Utilities
    {
        /// <summary>Default timeout value set in <see cref="AppContext"/>, or <see cref="Regex.InfiniteMatchTimeout"/> if none was set.</summary>
        internal static readonly TimeSpan s_defaultTimeout = AppContext.GetData("REGEX_DEFAULT_MATCH_TIMEOUT") is TimeSpan timeout ? timeout : Regex.InfiniteMatchTimeout;
        
        /// <summary>Whether <see cref="s_defaultTimeout"/> is non-infinite.</summary>
        internal static readonly bool s_hasTimeout = s_defaultTimeout != Regex.InfiniteMatchTimeout;
        
        /// <summary>Finds the next index of any character that matches a Unicode digit.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static int IndexOfAnyDigit(this ReadOnlySpan<char> span)
        {
            int i = span.IndexOfAnyExcept(Utilities.s_asciiExceptDigits);
            if ((uint)i < (uint)span.Length)
            {
                if (char.IsAscii(span[i]))
                {
                    return i;
                }
        
                do
                {
                    if (char.IsDigit(span[i]))
                    {
                        return i;
                    }
                    i++;
                }
                while ((uint)i < (uint)span.Length);
            }
        
            return -1;
        }
        
        /// <summary>Pops 2 values from the backtracking stack.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static void StackPop(int[] stack, ref int pos, out int arg0, out int arg1)
        {
            arg0 = stack[--pos];
            arg1 = stack[--pos];
        }
        
        /// <summary>Pushes 1 value onto the backtracking stack.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static void StackPush(ref int[] stack, ref int pos, int arg0)
        {
            // If there's space available for the value, store it.
            int[] s = stack;
            int p = pos;
            if ((uint)p < (uint)s.Length)
            {
                s[p] = arg0;
                pos++;
                return;
            }
        
            // Otherwise, resize the stack to make room and try again.
            WithResize(ref stack, ref pos, arg0);
        
            // <summary>Resize the backtracking stack array and push 1 value onto the stack.</summary>
            [MethodImpl(MethodImplOptions.NoInlining)]
            static void WithResize(ref int[] stack, ref int pos, int arg0)
            {
                Array.Resize(ref stack, (pos + 0) * 2);
                StackPush(ref stack, ref pos, arg0);
            }
        }
        
        /// <summary>Pushes 2 values onto the backtracking stack.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static void StackPush(ref int[] stack, ref int pos, int arg0, int arg1)
        {
            // If there's space available for all 2 values, store them.
            int[] s = stack;
            int p = pos;
            if ((uint)(p + 1) < (uint)s.Length)
            {
                s[p] = arg0;
                s[p + 1] = arg1;
                pos += 2;
                return;
            }
        
            // Otherwise, resize the stack to make room and try again.
            WithResize(ref stack, ref pos, arg0, arg1);
        
            // <summary>Resize the backtracking stack array and push 2 values onto the stack.</summary>
            [MethodImpl(MethodImplOptions.NoInlining)]
            static void WithResize(ref int[] stack, ref int pos, int arg0, int arg1)
            {
                Array.Resize(ref stack, (pos + 1) * 2);
                StackPush(ref stack, ref pos, arg0, arg1);
            }
        }
        
        /// <summary>Pushes 3 values onto the backtracking stack.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static void StackPush(ref int[] stack, ref int pos, int arg0, int arg1, int arg2)
        {
            // If there's space available for all 3 values, store them.
            int[] s = stack;
            int p = pos;
            if ((uint)(p + 2) < (uint)s.Length)
            {
                s[p] = arg0;
                s[p + 1] = arg1;
                s[p + 2] = arg2;
                pos += 3;
                return;
            }
        
            // Otherwise, resize the stack to make room and try again.
            WithResize(ref stack, ref pos, arg0, arg1, arg2);
        
            // <summary>Resize the backtracking stack array and push 3 values onto the stack.</summary>
            [MethodImpl(MethodImplOptions.NoInlining)]
            static void WithResize(ref int[] stack, ref int pos, int arg0, int arg1, int arg2)
            {
                Array.Resize(ref stack, (pos + 2) * 2);
                StackPush(ref stack, ref pos, arg0, arg1, arg2);
            }
        }
        
        /// <summary>Supports searching for characters in or not in "\0\u0001\u0002\u0003\u0004\u0005\u0006\a\b\t\n\v\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&amp;'()*+,-./:;&lt;=&gt;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\u007f".</summary>
        internal static readonly SearchValues<char> s_asciiExceptDigits = SearchValues.Create("\0\u0001\u0002\u0003\u0004\u0005\u0006\a\b\t\n\v\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\u007f");
        
        /// <summary>Supports searching for characters in or not in "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".</summary>
        internal static readonly SearchValues<char> s_asciiLetters = SearchValues.Create("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz");
    }
}
